// Code generated by go-swagger; DO NOT EDIT.

// SPDX-License-Identifier: Apache-2.0
//

package dcim

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDcimPowerPanelsListParams creates a new DcimPowerPanelsListParams object
// with the default values initialized.
func NewDcimPowerPanelsListParams() *DcimPowerPanelsListParams {
	var ()
	return &DcimPowerPanelsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDcimPowerPanelsListParamsWithTimeout creates a new DcimPowerPanelsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDcimPowerPanelsListParamsWithTimeout(timeout time.Duration) *DcimPowerPanelsListParams {
	var ()
	return &DcimPowerPanelsListParams{

		timeout: timeout,
	}
}

// NewDcimPowerPanelsListParamsWithContext creates a new DcimPowerPanelsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewDcimPowerPanelsListParamsWithContext(ctx context.Context) *DcimPowerPanelsListParams {
	var ()
	return &DcimPowerPanelsListParams{

		Context: ctx,
	}
}

// NewDcimPowerPanelsListParamsWithHTTPClient creates a new DcimPowerPanelsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDcimPowerPanelsListParamsWithHTTPClient(client *http.Client) *DcimPowerPanelsListParams {
	var ()
	return &DcimPowerPanelsListParams{
		HTTPClient: client,
	}
}

/*DcimPowerPanelsListParams contains all the parameters to send to the API endpoint
for the dcim power panels list operation typically these are written to a http.Request
*/
type DcimPowerPanelsListParams struct {

	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Q*/
	Q *string
	/*RackGroupID*/
	RackGroupID *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithTimeout(timeout time.Duration) *DcimPowerPanelsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithContext(ctx context.Context) *DcimPowerPanelsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithHTTPClient(client *http.Client) *DcimPowerPanelsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDIn adds the iDIn to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithIDIn(iDIn *string) *DcimPowerPanelsListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetIDIn(iDIn *string) {
	o.IDIn = iDIn
}

// WithLimit adds the limit to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithLimit(limit *int64) *DcimPowerPanelsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithName(name *string) *DcimPowerPanelsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithOffset(offset *int64) *DcimPowerPanelsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithQ(q *string) *DcimPowerPanelsListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetQ(q *string) {
	o.Q = q
}

// WithRackGroupID adds the rackGroupID to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithRackGroupID(rackGroupID *string) *DcimPowerPanelsListParams {
	o.SetRackGroupID(rackGroupID)
	return o
}

// SetRackGroupID adds the rackGroupId to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetRackGroupID(rackGroupID *string) {
	o.RackGroupID = rackGroupID
}

// WithSite adds the site to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithSite(site *string) *DcimPowerPanelsListParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the dcim power panels list params
func (o *DcimPowerPanelsListParams) WithSiteID(siteID *string) *DcimPowerPanelsListParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the dcim power panels list params
func (o *DcimPowerPanelsListParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WriteToRequest writes these params to a swagger request
func (o *DcimPowerPanelsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn string
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := qrIDIn
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.RackGroupID != nil {

		// query param rack_group_id
		var qrRackGroupID string
		if o.RackGroupID != nil {
			qrRackGroupID = *o.RackGroupID
		}
		qRackGroupID := qrRackGroupID
		if qRackGroupID != "" {
			if err := r.SetQueryParam("rack_group_id", qRackGroupID); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
